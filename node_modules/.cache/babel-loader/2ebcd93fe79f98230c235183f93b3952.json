{"ast":null,"code":"import { DISPLAY_DATA, FETCH_FROM_STORAGE, FETCH_NEW_USERS } from './types';\nimport axios from 'axios';\nimport { store } from '../store';\nconst id = process.env.API_KEY;\nconst secret = process.env.API_SECRET;\nconst params = `client_id=${id}&client_secret=${secret}`;\nexport const fetchUsers = text => dispatch => {\n  const userList = store.getState().userStorage;\n  let storedUserData = [];\n\n  if (userList.length) {\n    storedUserData = userList.filter(user => user.text === text);\n  }\n\n  if (storedUserData.length) {\n    dispatch({\n      type: FETCH_FROM_STORAGE,\n      payload: storedUserData[0].data,\n      text: text,\n      datatype: 'users'\n    });\n  } else {\n    axios.get(`https://api.github.com/search/users?q=${text}&${params}&per_page=20`).then(response => dispatch({\n      type: DISPLAY_DATA,\n      payload: response.data.items,\n      text: text,\n      datatype: 'users'\n    })).then(response => {\n      dispatch({\n        type: FETCH_NEW_USERS,\n        payload: response.payload,\n        text: response.text,\n        datatype: 'users'\n      });\n    }).catch(err => console.log('Authenticated requests get a higher rate limit.Wait for second and try again...'));\n  }\n};","map":{"version":3,"sources":["/Users/mudasir/workspace/proj/girhubSeacher/src/actions/userActions.js"],"names":["DISPLAY_DATA","FETCH_FROM_STORAGE","FETCH_NEW_USERS","axios","store","id","process","env","API_KEY","secret","API_SECRET","params","fetchUsers","text","dispatch","userList","getState","userStorage","storedUserData","length","filter","user","type","payload","data","datatype","get","then","response","items","catch","err","console","log"],"mappings":"AAAA,SACEA,YADF,EAEEC,kBAFF,EAGEC,eAHF,QAIO,SAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAvB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,UAA3B;AACA,MAAMC,MAAM,GAAI,aAAYN,EAAG,kBAAiBI,MAAO,EAAvD;AAEA,OAAO,MAAMG,UAAU,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AAE5C,QAAMC,QAAQ,GAAGX,KAAK,CAACY,QAAN,GAAiBC,WAAlC;AACA,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAGH,QAAQ,CAACI,MAAZ,EACA;AACED,IAAAA,cAAc,GAAGH,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACR,IAAL,KAAcA,IAAtC,CAAjB;AACD;;AAED,MAAGK,cAAc,CAACC,MAAlB,EACA;AACEL,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAErB,kBADC;AAEPsB,MAAAA,OAAO,EAAEL,cAAc,CAAC,CAAD,CAAd,CAAkBM,IAFpB;AAGPX,MAAAA,IAAI,EAAGA,IAHA;AAIPY,MAAAA,QAAQ,EAAG;AAJJ,KAAD,CAAR;AAMD,GARD,MAQO;AACLtB,IAAAA,KAAK,CACJuB,GADD,CACM,yCAAwCb,IAAK,IAAGF,MAAO,cAD7D,EAECgB,IAFD,CAEMC,QAAQ,IACZd,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEtB,YADC;AAEPuB,MAAAA,OAAO,EAAEK,QAAQ,CAACJ,IAAT,CAAcK,KAFhB;AAGPhB,MAAAA,IAAI,EAAGA,IAHA;AAIPY,MAAAA,QAAQ,EAAG;AAJJ,KAAD,CAHV,EAUCE,IAVD,CAUOC,QAAD,IAAc;AAClBd,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAEpB,eADC;AAEPqB,QAAAA,OAAO,EAAEK,QAAQ,CAACL,OAFX;AAGPV,QAAAA,IAAI,EAAGe,QAAQ,CAACf,IAHT;AAIPY,QAAAA,QAAQ,EAAG;AAJJ,OAAD,CAAR;AAMD,KAjBD,EAkBCK,KAlBD,CAkBOC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,iFAAZ,CAlBd;AAmBD;AACF,CAvCM","sourcesContent":["import {\r\n  DISPLAY_DATA,\r\n  FETCH_FROM_STORAGE,\r\n  FETCH_NEW_USERS,\r\n} from './types';\r\nimport axios from 'axios';\r\nimport {store} from '../store';\r\n\r\nconst id = process.env.API_KEY;\r\nconst secret = process.env.API_SECRET;\r\nconst params = `client_id=${id}&client_secret=${secret}`;\r\n\r\nexport const fetchUsers = text => dispatch => {\r\n\r\n  const userList = store.getState().userStorage;\r\n  let storedUserData = [];\r\n\r\n  if(userList.length)\r\n  {\r\n    storedUserData = userList.filter(user => user.text === text); \r\n  }\r\n\r\n  if(storedUserData.length)\r\n  {\r\n    dispatch({\r\n      type: FETCH_FROM_STORAGE,\r\n      payload: storedUserData[0].data,\r\n      text : text,\r\n      datatype : 'users'\r\n    })\r\n  } else {\r\n    axios\r\n    .get(`https://api.github.com/search/users?q=${text}&${params}&per_page=20`)\r\n    .then(response =>  \r\n      dispatch({\r\n        type: DISPLAY_DATA,\r\n        payload: response.data.items,\r\n        text : text,\r\n        datatype : 'users'\r\n      })\r\n    )\r\n    .then((response) => {\r\n      dispatch({\r\n        type: FETCH_NEW_USERS,\r\n        payload: response.payload,\r\n        text : response.text,\r\n        datatype : 'users'\r\n      }) \r\n    })\r\n    .catch(err => console.log('Authenticated requests get a higher rate limit.Wait for second and try again...'));\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}