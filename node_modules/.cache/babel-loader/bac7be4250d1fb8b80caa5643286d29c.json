{"ast":null,"code":"import { FETCH_FROM_STORAGE, FETCH_NEW_REPOS, DISPLAY_DATA } from './types';\nimport axios from 'axios';\nimport { store } from '../store';\nconst id = process.env.API_KEY;\nconst secret = process.env.API_SECRET;\nconst params = `client_id=${id}&client_secret=${secret}`;\nexport const fetchRepos = text => dispatch => {\n  const repoList = store.getState().repoStorage;\n  let storedRepoData = [];\n\n  if (repoList.length) {\n    storedRepoData = repoList.filter(repo => repo.text === text);\n  }\n\n  if (storedRepoData.length) {\n    dispatch({\n      type: FETCH_FROM_STORAGE,\n      payload: storedRepoData[0].data,\n      text: text,\n      datatype: 'repos'\n    });\n  } else {\n    axios.get(`https://api.github.com/search/repositories?q=${text}&${params}&per_page=20`).then(response => dispatch({\n      type: DISPLAY_DATA,\n      payload: response.data.items,\n      text: text,\n      datatype: 'repos'\n    })).then(response => dispatch({\n      type: FETCH_NEW_REPOS,\n      payload: response.payload,\n      text: response.text,\n      datatype: 'repos'\n    })).catch(err => console.log(err));\n  }\n};","map":{"version":3,"sources":["/Users/mudasir/workspace/proj/girhubSeacher/src/actions/repoActions.js"],"names":["FETCH_FROM_STORAGE","FETCH_NEW_REPOS","DISPLAY_DATA","axios","store","id","process","env","API_KEY","secret","API_SECRET","params","fetchRepos","text","dispatch","repoList","getState","repoStorage","storedRepoData","length","filter","repo","type","payload","data","datatype","get","then","response","items","catch","err","console","log"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,eAA7B,EAA8CC,YAA9C,QAAkE,SAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,UAApB;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAvB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,UAA3B;AACA,MAAMC,MAAM,GAAI,aAAYN,EAAG,kBAAiBI,MAAO,EAAvD;AAEA,OAAO,MAAMG,UAAU,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AAE5C,QAAMC,QAAQ,GAAGX,KAAK,CAACY,QAAN,GAAiBC,WAAlC;AACA,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAGH,QAAQ,CAACI,MAAZ,EACA;AACED,IAAAA,cAAc,GAAGH,QAAQ,CAACK,MAAT,CAAgBC,IAAI,IAAIA,IAAI,CAACR,IAAL,KAAcA,IAAtC,CAAjB;AACD;;AAED,MAAGK,cAAc,CAACC,MAAlB,EACA;AACEL,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEtB,kBADC;AAEPuB,MAAAA,OAAO,EAAEL,cAAc,CAAC,CAAD,CAAd,CAAkBM,IAFpB;AAGPX,MAAAA,IAAI,EAAGA,IAHA;AAIPY,MAAAA,QAAQ,EAAG;AAJJ,KAAD,CAAR;AAMD,GARD,MAQO;AACLtB,IAAAA,KAAK,CACJuB,GADD,CACM,gDAA+Cb,IAAK,IAAGF,MAAO,cADpE,EAECgB,IAFD,CAEMC,QAAQ,IACZd,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAEpB,YADC;AAEPqB,MAAAA,OAAO,EAAEK,QAAQ,CAACJ,IAAT,CAAcK,KAFhB;AAGPhB,MAAAA,IAAI,EAAGA,IAHA;AAIPY,MAAAA,QAAQ,EAAG;AAJJ,KAAD,CAHV,EAUCE,IAVD,CAUMC,QAAQ,IACZd,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAErB,eADC;AAEPsB,MAAAA,OAAO,EAAEK,QAAQ,CAACL,OAFX;AAGPV,MAAAA,IAAI,EAAGe,QAAQ,CAACf,IAHT;AAIPY,MAAAA,QAAQ,EAAG;AAJJ,KAAD,CAXV,EAkBCK,KAlBD,CAkBOC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAlBd;AAmBD;AACF,CAvCM","sourcesContent":["import { FETCH_FROM_STORAGE, FETCH_NEW_REPOS, DISPLAY_DATA } from './types';\r\nimport axios from 'axios';\r\nimport {store} from '../store';\r\n\r\nconst id = process.env.API_KEY;\r\nconst secret = process.env.API_SECRET;\r\nconst params = `client_id=${id}&client_secret=${secret}`;\r\n\r\nexport const fetchRepos = text => dispatch => {\r\n\r\n  const repoList = store.getState().repoStorage;\r\n  let storedRepoData = [];\r\n\r\n  if(repoList.length)\r\n  {\r\n    storedRepoData = repoList.filter(repo => repo.text === text); \r\n  }\r\n\r\n  if(storedRepoData.length)\r\n  {\r\n    dispatch({\r\n      type: FETCH_FROM_STORAGE,\r\n      payload: storedRepoData[0].data,\r\n      text : text,\r\n      datatype : 'repos'\r\n    })\r\n  } else {\r\n    axios\r\n    .get(`https://api.github.com/search/repositories?q=${text}&${params}&per_page=20`)\r\n    .then(response =>  \r\n      dispatch({\r\n        type: DISPLAY_DATA,\r\n        payload: response.data.items,\r\n        text : text,\r\n        datatype : 'repos'\r\n      })\r\n    )\r\n    .then(response =>\r\n      dispatch({\r\n        type: FETCH_NEW_REPOS,        \r\n        payload: response.payload,\r\n        text : response.text,\r\n        datatype : 'repos'\r\n      })\r\n    )\r\n    .catch(err => console.log(err));\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}